// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/bss_office_facade/v1/bss_office_facade.proto

package bss_office_facade

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on OfficePayload with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OfficePayload) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return OfficePayloadValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return OfficePayloadValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	// no validation rules for Description

	return nil
}

// OfficePayloadValidationError is the validation error returned by
// OfficePayload.Validate if the designated constraints aren't met.
type OfficePayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficePayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficePayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficePayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficePayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficePayloadValidationError) ErrorName() string { return "OfficePayloadValidationError" }

// Error satisfies the builtin error interface
func (e OfficePayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfficePayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficePayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficePayloadValidationError{}

// Validate checks the field values on OfficeEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OfficeEvent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return OfficeEventValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetOfficeId() <= 0 {
		return OfficeEventValidationError{
			field:  "OfficeId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetType()); l < 2 || l > 100 {
		return OfficeEventValidationError{
			field:  "Type",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeEventValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeEventValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeEventValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OfficeEventValidationError is the validation error returned by
// OfficeEvent.Validate if the designated constraints aren't met.
type OfficeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficeEventValidationError) ErrorName() string { return "OfficeEventValidationError" }

// Error satisfies the builtin error interface
func (e OfficeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfficeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficeEventValidationError{}
